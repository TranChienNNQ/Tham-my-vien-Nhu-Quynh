// server.js (T·ªëi gi·∫£n - Nh·∫•n m·∫°nh NODE_ENV)

const http = require("http");
require("dotenv").config();

const app = require("./app"); // Import app ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u
const logger = require("./utils/logger"); // Import logger
const db = require("./config/db.config"); // Import db config
const { on } = require("events");

const PORT = process.env.PORT || 3001;
const NODE_ENV = process.env.NODE_ENV || "development"; // X√°c ƒë·ªãnh m√¥i tr∆∞·ªùng

const onListening = async () => {
  const addr = server.address();
  const bind =
    typeof addr.port === "string" ? "Pipe " + addr.port : "Port " + addr.port;
  const environment = process.env.NODE_ENV || "development";
  logger.info(`‚úÖ Server is running in ${environment} mode`);
  logger.info(`Listening on ${bind}`);
  logger.info(`PID: ${process.pid}`);

  try {
    await db.testConnection(); // Ki·ªÉm tra k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu
    logger.info("Database connection successful");
  } catch (error) {
    logger.error("Error testing connection to the database:");
    process.kill(process.pid, "SIGTERM");
  }
};
const server = http.createServer(app);

server.listen(PORT, () => {
  // Log th√¥ng tin quan tr·ªçng khi kh·ªüi ƒë·ªông
  console.log(`‚úÖ Server listening on port ${PORT}`);
  console.log(`   Mode: ${NODE_ENV}`); // Hi·ªÉn th·ªã m√¥i tr∆∞·ªùng ƒëang ch·∫°y
  console.log(`   PID: ${process.pid}`);
  console.log(`   Access root at: http://localhost:${PORT}/`);
});

server.on("error", (error) => {
  // Gi·ªØ nguy√™n x·ª≠ l√Ω l·ªói kh·ªüi ƒë·ªông c∆° b·∫£n
  if (error.syscall !== "listen") throw error;
  const bind = typeof PORT === "string" ? "Pipe " + PORT : "Port " + PORT;
  switch (error.code) {
    case "EACCES":
      console.error(`‚ùå ${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`‚ùå ${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.on("listening", onListening);

// L∆∞u √Ω: C√°c handler `uncaughtException`, `unhandledRejection`, `SIGTERM`
// r·∫•t quan tr·ªçng cho production, nh∆∞ng t·∫°m th·ªùi b·ªè qua ƒë·ªÉ gi·ªØ s·ª± ƒë∆°n gi·∫£n.
// Ch√∫ng ta s·∫Ω th√™m l·∫°i khi x√¢y d·ª±ng phi√™n b·∫£n ho√†n ch·ªânh.
// --- Graceful Shutdown Logic ---
// S·ª≠a gracefulShutdown ƒë·ªÉ ƒë√≥ng pool DB
const gracefulShutdown = (signal) => {
  logger.warn(`üëã Received ${signal}. Starting graceful shutdown...`);
  server.close(async () => {
    // <<< TH√äM ASYNC
    logger.info("‚úÖ HTTP server closed.");
    // ƒê√≥ng k·∫øt n·ªëi DB Pool
    try {
      if (db.pool) {
        // Ki·ªÉm tra pool t·ªìn t·∫°i
        await db.pool.end(); // <<< B·ªé COMMENT V√Ä S·ª¨ D·ª§NG pool.end()
        logger.info("‚úÖ Database connection pool closed.");
      }
    } catch (err) {
      logger.error("‚ùå Error during DB pool cleanup:", err);
    } finally {
      logger.info("Shutdown complete.");
      process.exit(0);
    }
  });

  // Force shutdown after timeout (gi·ªØ nguy√™n)
  setTimeout(() => {
    logger.error(
      "‚ùå Could not close connections in time, forcefully shutting down."
    );
    process.exit(1);
  }, 15000);
};

// --- Process Event Handlers --- (gi·ªØ nguy√™n)
process.on("SIGTERM", () => gracefulShutdown("SIGTERM"));
process.on("SIGINT", () => gracefulShutdown("SIGINT"));
process.on("unhandledRejection", (reason, promise) => {
  /* ... d√πng logger ... */
});
process.on("uncaughtException", (error) => {
  /* ... d√πng logger v√† gracefulShutdown ... */
});

logger.info(`Server process starting with PID: ${process.pid}`);
